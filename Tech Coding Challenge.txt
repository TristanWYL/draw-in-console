·         There is no time limit (approximately a week as benchmark)

·         Solving the problem itself is easy but don’t treat this as a ‘code golf’ exercise.

·         Please complete the challenge using one of the following languages – Kotlin, Java, JavaScript or Typescript

·         A good submission demonstrates sound object oriented (or functional) design, SOLID principles and patterns, thought about edge and failure cases, clean readable code and is thoroughly covered by tests.

·         We would rather you produce a polished solution, than a fast one, but equally there’s no need to over engineer, so do take your time and focus on high quality code before submitting it.

Add a readme file with instructions on how to run the program
If there are special cases etc., which are not covered as part of the requirement, please make your own decision on how this should be handled.
If you do make any assumptions, please detail them along with how you handled them in the readme file.
Both the test and implementation code will be assessed. 
Assessment will primarily, but not solely, based upon:
How comprehensively the code is tested.
The design choices made when implementing the solution (maintainability, legibility, refactorability, etc.)
Exception and special case handling.
You should aim to implement up to a level where you would be happy to have somebody judge your result.
Please refrain from plagiarizing existing solutions that may have been shared on the Internet.



*** The Problem ***

__Description__

You're given the task of writing a simple console version of a drawing program. 
At this time, the functionality of the program is quite limited but this might change in the future. 
In a nutshell, the program should work as follows:
 1. Create a new canvas
 2. Start drawing on the canvas by issuing various commands
 3. Quit


Command 		Description
C w h           Should create a new canvas of width w and height h.
L x1 y1 x2 y2   Should create a new line from (x1,y1) to (x2,y2). Currently only
                horizontal or vertical lines are supported. Horizontal and vertical lines
                will be drawn using the 'x' character.
R x1 y1 x2 y2   Should create a new rectangle, whose upper left corner is (x1,y1) and
                lower right corner is (x2,y2). Horizontal and vertical lines will be drawn
                using the 'x' character.
B x y c         Should fill the entire area connected to (x,y) with "colour" c. The
                behavior of this is the same as that of the "bucket fill" tool in paint
                programs.
Q               Should quit the program.

__Sample I/O__

Below is a sample run of the program. User input is prefixed with enter command:

enter command: C 20 4
----------------------
|                    |
|                    |
|                    |
|                    |
----------------------

enter command: L 1 2 6 2
----------------------
|                    |
|xxxxxx              |
|                    |
|                    |
----------------------

enter command: L 6 3 6 4
----------------------
|                    |
|xxxxxx              |
|     x              |
|     x              |
----------------------

enter command: R 14 1 18 3
----------------------
|             xxxxx  |
|xxxxxx       x   x  |
|     x       xxxxx  |
|     x              |
----------------------

enter command: B 10 3 o
----------------------
|oooooooooooooxxxxxoo|
|xxxxxxooooooox   xoo|
|     xoooooooxxxxxoo|
|     xoooooooooooooo|
----------------------

enter command: Q




